Problem: need to add normalization for models that requir it. 
simple and ion both have pre-normalized inputs.  credit and ovarian
require their inputs to be normalized by a mean and sigma stored in
the input file, and then the equation needs minor changes you can see
the differences by looking in python/old_code and diffing lsvm-ion.py
and lsvm-credit.py

Problem lsvm-ovarian input needs to be redone. 

lsvm-ovarian.py has a differnt input file format (there are very many
features, so each data point has its own file. I would suggest writing
a short utility to assemble them into one big file so it can use the
same format as the other examples.
also the class values of true and false may be reversed for that data..


Problem: lsvm ion does not seem to give correct answer:


running my old TBO version of ion 
using this recipie:

make pywrapper 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:bin/lib:third-party/lib
export PYTHONPATH=$PYTHONPATH:bin/lib
sudo apt install python-pip
pip install seaborn #only for lsvm-simple
pip install numpy
pip install matplotlib
sudo apt-get install python-tk

#note the following is for the darpa demo in the old student edition
python src/wrappers/python/lsvm-ion.py #from root palisade directory
#note the original code has been copied into python/old_code

gives the folowing result for 175 queries

============================================

Confusion Table
TN% = 29.7
TP% = 60.6
FP% = 8.0
FN% = 1.7

Performance 
True Pos Rate % =  97.2 a.k.a. Sensitivity, Recall
True Neg Rate % =  78.8
False Pos Rate % = 21.2
MissClass Rate % = 9.7
Accuracy % =       90.3
Precision % =      88.3
Prevalence % =     62.3

===================================
running the new version of ion I get

python3 python/lsvm.py -m ion -n 175 -v


Ground truth Confusion Table
TN = 18.9
FP = 16.0
FN = 0.0
TP = 65.1

Performance res_plain
True Pos Rate % =  100.0 a.k.a. Sensitivity, Recall
True Neg Rate % =  54.1
False Pos Rate % = 45.9
MissClass Rate % = 16.0
Accuracy % =       84.0
Precision % =      80.3
Prevalence % =     65.1


I would expect the statistics to be much closer.
so maybe there is a bug?

===================================
